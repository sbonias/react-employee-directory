{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/Table/Table-Data.js","components/Table/Table-Header.js","utils/API.js","components/Filter.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchForm","props","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","TableData","firstName","lastName","email","TableHeader","axios","get","Filter","Table","event","target","console","log","setState","filterResults","handleFormSubmit","preventDefault","search","resultFilter","state","result","filter","toLowerCase","indexOf","API","then","res","data","results","catch","err","this","map","item","first","last","match","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qQAYeA,MATf,WACE,OACE,yBAAKC,UAAU,UACb,kDACA,4FCgBSC,MApBf,SAAoBC,GAClB,OACE,8BACE,yBAAKF,UAAU,cACb,2BAAOG,QAAQ,UAAf,WACA,2BACEC,SAAUF,EAAMG,kBAChBC,MAAOJ,EAAMI,MACbC,KAAK,SACLC,KAAK,OACLR,UAAU,eACVS,YAAY,yBACZC,GAAG,WAEL,gC,gCCJOC,MAVf,SAAmBT,GACjB,OACQ,4BACE,4BAAKA,EAAMU,WACX,4BAAKV,EAAMW,UACX,4BAAKX,EAAMY,SCWRC,MAhBf,WACE,OAGM,+BACA,4BACE,0CACA,yCACA,yC,iBCLK,EACO,WAClB,OAAOC,IAAMC,IAAI,0CCKNC,MAVf,SAAgBhB,GACd,OACE,4BACE,4BAAKA,EAAMU,WACX,4BAAKV,EAAMW,UACX,4BAAKX,EAAMY,SC8EFK,E,kDA7Eb,aAAe,IAAD,8BACZ,gBAmBFd,kBAAoB,SAACe,GACnB,IAAId,EAAQc,EAAMC,OAAOf,MAEzBgB,QAAQC,IAAIjB,GACZ,EAAKkB,SAAS,CACZC,cAAenB,IAEjB,EAAKmB,iBA3BO,EA8BdC,iBAAmB,SAACN,GAElBA,EAAMO,iBACN,EAAKH,SAAS,CAAEI,OAAQR,EAAMC,OAAOf,SAjCzB,EAqCdmB,cAAgB,SAACI,GACf,IAAIJ,EAAgB,EAAKK,MAAMC,OAC/BN,EAAgBA,EAAcO,QAAO,SAACD,GAGpC,OAA2D,KADzDA,EAAOnB,UAAUqB,cAAgBF,EAAOlB,SAASoB,eACjCC,QAAQL,EAAaI,kBAEzC,EAAKT,SAAS,CACZC,mBA3CF,EAAKK,MAAQ,CACXC,OAAQ,GACRN,cAAe,IAJL,E,gEASO,IAAD,OAClBU,IACGC,MAAK,SAACC,GAAD,OACJ,EAAKb,SAAS,CACZO,OAAQM,EAAIC,KAAKC,QACjBd,cAAeY,EAAIC,KAAKC,aAG3BC,OAAM,SAACC,GAAD,OAASnB,QAAQC,IAAIkB,Q,+BAiC9B,OACE,yBAAKzC,UAAU,SACb,kBAAC,EAAD,CACE0B,iBAAkBgB,KAAKhB,iBACvBrB,kBAAmBqC,KAAKrC,kBACxBuB,OAAQc,KAAKZ,MAAMF,SAErB,kBAAC,EAAD,MACCc,KAAKZ,MAAMC,OAAOY,KAAI,SAACC,GACtB,OACE,kBAAC,EAAD,CACE5C,UAAU,iBACVY,UAAWgC,EAAKrC,KAAKsC,MACrBhC,SAAU+B,EAAKrC,KAAKuC,KACpBhC,MAAO8B,EAAK9B,WAIlB,kBAAC,EAAD,CACEiB,OAAQW,KAAKZ,MAAML,cACnBsB,MAAOL,KAAKxC,MAAM6C,MAClB3C,SAAUsC,KAAKjB,qB,GAxELuB,aCOLC,MATf,WACE,OACE,yBAAKjD,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2D,MCTNO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.eabd933e.chunk.js","sourcesContent":["import React from 'react';\n// import './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1>Employee Directory</h1>\n      <p>Sort the table by category and filter the users by property</p>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n// import './SearchForm.css';\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search For an Employee\"\n          id=\"search\"\n        />\n        <br />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n\n// a place in state to store search term\n// the function that handles when the user changes the input (form)\n","import React from 'react';\n// import './Table.css';\n\nfunction TableData(props) {\n  return (\n          <tr>\n            <td>{props.firstName}</td>\n            <td>{props.lastName}</td>\n            <td>{props.email}</td>\n          </tr>\n  );\n}\n\nexport default TableData;\n","import React from 'react';\n// import './Table.css';\n\nfunction TableHeader() {\n  return (\n    // <div className=\"TableHeader\">\n    //   <table className=\"tableHeader\">\n        <tbody>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>E-mail</th>\n        </tr>\n        </tbody>\n    //   </table>\n    // </div>\n  );\n}\n\nexport default TableHeader;\n","import axios from 'axios';\n\n// Export an object containing methods we'll use for accessing the random users API\n// https://randomuser.me/\n// https://randomuser.me/documentation\n\nexport default {\n  getRandomEmployees: function () {\n    return axios.get('https://randomuser.me/api/?results=25');\n  },\n};\n","import React from 'react';\n// import './Table.css';\n\nfunction Filter(props) {\n  return (\n    <tr>\n      <td>{props.firstName}</td>\n      <td>{props.lastName}</td>\n      <td>{props.email}</td>\n    </tr>\n  );\n}\n\nexport default Filter;\n","import React, { Component } from 'react';\n// import './Table.css';\nimport TableData from './Table-Data';\nimport TableHeader from './Table-Header';\nimport SearchForm from '../SearchForm';\nimport API from '../../utils/API';\nimport Filter from '../Filter';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: [],\n      filterResults: [],\n    };\n  }\n\n  // When this component mounts, execute API\n  componentDidMount() {\n    API.getRandomEmployees()\n      .then((res) =>\n        this.setState({\n          result: res.data.results,\n          filterResults: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  handleInputChange = (event) => {\n    let value = event.target.value;\n    // const name = event.target.name;\n    console.log(value);\n    this.setState({\n      filterResults: value,\n    });\n    this.filterResults();\n  };\n\n  handleFormSubmit = (event) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n    this.setState({ search: event.target.value });\n  };\n\n  // https://medium.com/@AndrewBonner2/filter-results-with-react-f746dc7984c\n  filterResults = (resultFilter) => {\n    let filterResults = this.state.result;\n    filterResults = filterResults.filter((result) => {\n      let resultName =\n        result.firstName.toLowerCase() + result.lastName.toLowerCase();\n      return resultName.indexOf(resultFilter.toLowerCase()) !== -1;\n    });\n    this.setState({\n      filterResults,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Table\">\n        <SearchForm\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          search={this.state.search}\n        />\n        <TableHeader />\n        {this.state.result.map((item) => {\n          return (\n            <TableData\n              className=\"tableData-item\"\n              firstName={item.name.first}\n              lastName={item.name.last}\n              email={item.email}\n            ></TableData>\n          );\n        })}\n        <Filter\n          result={this.state.filterResults}\n          match={this.props.match}\n          onChange={this.filterResults}\n        ></Filter>\n      </div>\n    );\n  }\n}\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport SearchForm from './components/SearchForm';\nimport Table from './components/Table/Table';\n\nfunction App() {\n  return (\n    <div className=\"Container\">\n      <Header />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Bootstrap CSS and optionally Bootstrap theme CSS in the\n// beginning of your src/index.js file:\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}